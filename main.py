import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import markups
from markups import USER_MARKUP, USER_MARKUP_EN

import datetime
import time
import sys
import traceback

import database
import config
from config import CHANNEL, ADMINS, TOKEN


bot = telebot.TeleBot(token=TOKEN, skip_pending=True)


def global_exception_handler(exctype, value, tb):
    print("An unhandles exception occured:")
    traceback.print_exception(exctype, value, tb)

sys.excepthook = global_exception_handler


admin_states = {}
admin_states_data = {}
link_wallet = set()
referrers = dict()

STATE_WAITING_FOR_PUBLIC_LINK = "waiting_for_public_link"
STATE_WAITING_FOR_PRIVATE_LINK = "waiting_for_private_link"
STATE_WAITING_FOR_REWARD = "waiting_for_reward"
STATE_WAITING_FOR_PUBLIC_LINK_TO_DELETE = "waiting_for_public_link_to_delete"
STATE_WAITING_FOR_BROADCAST_MESSAGE = "waiting_for_broadcast_message"
STATE_WAITING_FOR_BROADCAST_IMAGE = "waiting_for_broadcast_image"
STATE_WAITING_FOR_BROADCAST_BUTTON_NAME = "waiting_for_broadcast_name"
STATE_WAITING_FOR_BROADCAST_BUTTON_LINK = "waiting_for_broadcast_link"
STATE_WAITING_FOR_USER_USERNAME_TO_GET_INFO = "waiting_for_user_username_to_get_info"
STATE_WAITING_FOR_USER_USERNAME_TO_INCREASE_BALANCE = "waiting_for_user_id_to_increase_balance"
STATE_WAITING_FOR_USER_USERNAME_TO_DECREASE_BALANCE = "waiting_for_user_id_to_decrease_balance"
STATE_WAITING_FOR_NUMBER_TO_INCREASE_BALANCE = "waiting_for_number_to_increase_balance"
STATE_WAITING_FOR_NUMBER_TO_DECREASE_BALANCE = "waiting_for_number_to_decrease_balance"
STATE_WAITING_FOR_BUYER_USERNAME = "waiting_for_buyer_username"
STATE_WAITING_FOR_BUYER_SUM = "waiting_for_buyer_sum"


def is_subscribed_default(user_id):
    member = bot.get_chat_member(CHANNEL, user_id)
    return member.status in ["member", "administrator", "creator"]


def ask_to_subscribe(user_id):
    inline_markup = types.InlineKeyboardMarkup()
    language = database.get_language(user_id=user_id)
    URL = f"https://t.me/{CHANNEL[1:]}"
    inline_subscribe_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=URL)
    inline_check_button = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" if language == "ru" else "Check", callback_data="callback_check_default_subscription")
    inline_markup.add(inline_subscribe_button, inline_check_button)
    bot.send_message(user_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {config.CHANNEL} —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞." if language == "ru" else f"Please, subscribe to the channel {config.CHANNEL} to continue", reply_markup=inline_markup)


def ask_to_choose_language(user_id):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nChoose language:"
    inline_markup = InlineKeyboardMarkup(row_width=2)
    en_button = InlineKeyboardButton("üá∫üá∏", callback_data="set_en")
    ru_button = InlineKeyboardButton("üá∑üá∫", callback_data="set_ru")
    inline_markup.add(en_button, ru_button)
    bot.send_message(chat_id=user_id, text=text, reply_markup=inline_markup)


def send_message_by_language(user_id, ru_message, en_message, image=None):
    language = database.get_language(user_id=user_id)
    if image == None:
        if language == 'ru':
            bot.send_message(user_id, ru_message, reply_markup=USER_MARKUP)
        else:
            bot.send_message(user_id, en_message, reply_markup=USER_MARKUP_EN)
    else:
        photo = open(image, "rb")
        if language == 'ru':
            bot.send_photo(user_id, photo, ru_message, reply_markup=USER_MARKUP)
        else:
            bot.send_photo(user_id, photo, en_message, reply_markup=USER_MARKUP_EN)


def get_channel_id(channel_link):
    try:
        chat = bot.get_chat(channel_link)
        return chat.id
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞")
        return None


def get_username_by_id(id: int) -> str:
    try:
        chat = bot.get_chat(id)
        return chat.username
    except Exception as e:
        print(f"Error: {e}")
        return None


def user_is_admin(user_id):
    return user_id in ADMINS


def public_link_is_valid(link):
    return get_channel_id(link) is not None


def user_is_subscribed_to_channel(user_id, public_link):
    try:
        member = bot.get_chat_member(public_link, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        pass


def add_channel(user_id):
    public_link = admin_states_data[user_id]["public_link"]
    private_link = admin_states_data[user_id]["private_link"]
    reward = admin_states_data[user_id]["reward"]
    database.add_channel_into_db(public_link=public_link, private_link=private_link, reward=reward)


def send_reward_to_referrer(referrer_id):
    database.send_reward_to_referrer(referrer_id=referrer_id)
    text = f"–ö—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {config.REFERRAL_REWARD} {config.COIN_NAME}!"
    bot.send_message(chat_id=referrer_id, text=text)


@bot.callback_query_handler(func=lambda call: call.data in ["set_ru", "set_en"])
def callback_set_language(call: types.CallbackQuery):
    try:
        user_id = call.from_user.id
        language = call.data[-2:]
        username = get_username_by_id(user_id)
        referrer = None
        if not database.is_user_in_db(user_id=user_id):
            if user_id in referrers:
                referrer_candidate = referrers[user_id]
                if database.is_user_in_db(user_id=referrer_candidate):
                    if not referrer_candidate == user_id:
                        referrer = referrer_candidate
                        send_reward_to_referrer(referrer_id=referrer)
                        database.increase_referrals(user_id=referrer)
            if referrer != None:
                database.add_user_into_db(user_id=user_id, language=language, referrer=referrer, username=username)
            else:
                database.add_user_into_db(user_id=user_id, language=language, username=username)
            ru_text = f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {config.WELCOME_BONUS} {config.COIN_NAME}"
            en_text = f"You got a welcome bonus of {config.WELCOME_BONUS} {config.COIN_NAME}"
            send_message_by_language(user_id=user_id, ru_message=ru_text, en_message=en_text)
        else:
            database.users_set(user_id=user_id, item="language", value=language)
        if not is_subscribed_default(user_id=user_id):
            ask_to_subscribe(user_id=user_id)
            return
    except Exception as e:
        print(e)


@bot.callback_query_handler(func=lambda call: call.data == "callback_check_default_subscription")
def callback_check_default_subscription(call):
    user_id = call.from_user.id
    language = database.get_language(user_id=user_id)
    user_is_subscribed = is_subscribed_default(user_id=user_id)
    if user_is_subscribed:
        image = open(f'images/img.jpg', 'rb')
        caption = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Neuro Mining!\n\nüöÄ AirDrop –±—É–¥—É—â–µ–≥–æ WebApp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º! \n\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω {config.COIN_NAME} –∞ —Ç–∞–∫ –∂–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã! –î–µ–π—Å—Ç–≤—É–π—Ç–µ! \n\n–ù–µ —É–ø—É—Å–∫–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥, –¥–µ–π—Å—Ç–≤—É–π—Ç–µ‚ö°Ô∏è" if language == "ru" else "Welcome to Neuro Mining!\n\nüöÄ AirDrop of the future WebApp application with real income!\n\nComplete tasks, invite friends and get {config.COIN_NAME} token as well as other cryptocurrencies! Act!\n\nDon't miss the opportunity to increase your income, act‚ö°Ô∏è"
        bot.send_photo(chat_id=user_id, photo=image, caption=caption, reply_markup=USER_MARKUP if language == "ru" else USER_MARKUP_EN)
    else:
        ask_to_subscribe(user_id=user_id)


@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    try:
        user_id = message.from_user.id
        referrer_id = None
        if " " in message.text:
            referrer_id = message.text.split()[1]
            referrers[user_id] = referrer_id
        else:
            referrers[user_id] = None
        if not database.is_user_in_db(user_id=user_id):
            ask_to_choose_language(user_id=user_id)
            return
        if not is_subscribed_default(user_id=user_id):
            ask_to_subscribe(user_id=user_id)
            return
        language = database.get_language(user_id=user_id)
        if not database.is_user_in_db(user_id=user_id):
            language = ask_to_choose_language(user_id=user_id)
        else:
            image = f"images/img.jpg"
            ru_caption = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Neuro Mining! \n\nüöÄ AirDrop –±—É–¥—É—â–µ–≥–æ WebApp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º! \n\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω {config.COIN_NAME} –∞ —Ç–∞–∫ –∂–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã!\n\n–î–µ–π—Å—Ç–≤—É–π—Ç–µ! \n\n–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥, –¥–µ–π—Å—Ç–≤—É–π—Ç–µ"
            en_caption = f"Welcome to Neuro Mining! \n\nüöÄ AirDrop the future WebApp application with real income! \n\nComplete tasks, invite friends and receive a {config.COIN_NAME} token as well as other cryptocurrencies!\n\nTake action! \n\nDon't miss the opportunity to increase your income, take action"
            send_message_by_language(user_id=user_id, ru_message=ru_caption, en_message=en_caption, image=image)
    except Exception as e:
        print(e)


@bot.message_handler(func=lambda message: message.text in markups.tasks_commands)
def cmd_tasks(message: types.Message):
    user_id = message.from_user.id
    language = database.get_language(user_id=user_id)
    if not database.is_user_in_db(user_id=user_id):
        ask_to_choose_language(user_id=user_id)
        return
    if not is_subscribed_default(user_id=user_id):
        ask_to_subscribe(user_id=user_id)
        return
    
    tasks = database.get_available_tasks(user_id=user_id)
    inline_markup = InlineKeyboardMarkup()
    if tasks:
        #  suppose to get link without "@"
        for public_link in tasks:
            channel_name = bot.get_chat("@" + public_link).title
            reward = database.get_reward(public_link="@" + public_link)
            button = InlineKeyboardButton(f"{channel_name} | {reward} {config.COIN_NAME}", callback_data=f"channel_{public_link}")
            inline_markup.add(button)

    image = open(f"images/img.jpg", "rb")
    ru_text = f"–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞—à —Ç–æ–∫–µ–Ω {config.COIN_NAME}\n\n–ß–µ–º –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π –≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –±—É–¥–µ—Ç –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ!"
    en_text = f"For completing each task, you receive our {config.COIN_NAME} token.\n\nThe more tasks you complete, the more tokens you will have on your balance!"
    bot.send_photo(chat_id=user_id, photo=image, caption=ru_text if language == "ru" else en_text, reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("channel_"))
def channel_subscription(call: types.CallbackQuery):
    user_id = call.from_user.id
    language = database.get_language(user_id=user_id)
    public_link = "@" + "_".join(call.data.split("_")[1:])
    private_link = database.get_channel_private_link(public_link=public_link)
    text = f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {public_link} –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'" if language == 'ru' else f"Subscribe to {public_link} and press 'Check'"
    inline_markup = InlineKeyboardMarkup()
    check_button = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" if language == 'ru' else "Check", callback_data=f"check_{public_link}")
    subscribe_button = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" if language == 'ru' else "Subscribe", url=private_link)
    inline_markup.add(subscribe_button, check_button)
    bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("check_"))
def check_subscription(call: types.CallbackQuery):
    try:
        user_id = call.from_user.id
        public_link = "_".join(call.data.split("_")[1:])
        reward = database.get_reward(public_link=public_link)
        if not database.was_rewarded_for_subscription(user_id=user_id, public_link=public_link):
            if user_is_subscribed_to_channel(user_id=user_id, public_link=public_link):
                database.subscribe_user_to_channel(user_id=user_id, public_link=public_link)
                database.increase_task_done_times(public_link=public_link)
                database.reward_user_for_subscription(user_id=user_id, reward=reward)
                ru_text = f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward} {config.COIN_NAME}!"
                en_text = f"You got {reward} {config.COIN_NAME}!"
                send_message_by_language(user_id=user_id, ru_message=ru_text, en_message=en_text)
            else:
                ru_text = f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª."
                en_text = f"You didn't subscribed to the channel."
                send_message_by_language(user_id=user_id, ru_message=ru_text, en_message=en_text)
        else:
            ru_text = f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É."
            en_text = f"You already got the reward."
            send_message_by_language(user_id=user_id, ru_message=ru_text, en_message=en_text)
    except Exception as e:
        print(e)


@bot.message_handler(func=lambda message: message.text in markups.balance_commands)
def cmd_balance(message: types.Message):
    user_id = message.from_user.id
    if not database.is_user_in_db(user_id=user_id):
        ask_to_choose_language(user_id=user_id)
        return
    if not is_subscribed_default(user_id=user_id):
        ask_to_subscribe(user_id=user_id)
        return
    language = database.get_language(user_id=user_id)
    image = open(f"images/img.jpg", "rb")
    balance = database.get_balance(user_id=user_id)
    paid_balance = database.users_get(item="paid_balance", user_id=user_id)
    referrals = database.get_referrals(user_id=user_id)
    referral_link = "https://t.me/Fehucoin_bot?start=" + str(user_id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π' if language == 'ru' else "Invite friends", switch_inline_query=referral_link)
    markup.add(button)
    caption = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} {config.COIN_NAME}\n–ü–ª–∞—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: {paid_balance} {config.COIN_NAME}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}\n\n–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ 1 —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {config.REFERRAL_REWARD} {config.COIN_NAME}\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}" if language == 'ru' else f"Your balance: {balance} {config.COIN_NAME}\nPaid balance: {paid_balance} {config.COIN_NAME}\n\nReferrals: {referrals}\n\nReward for 1 referral: {config.REFERRAL_REWARD} {config.COIN_NAME}\n\nYour referral link: {referral_link}"
    bot.send_photo(chat_id=user_id, photo=image, caption=caption, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in markups.claim_commands)
def cmd_get(message: types.Message):
    user_id = message.from_user.id
    if not database.is_user_in_db(user_id=user_id):
        ask_to_choose_language(user_id=user_id)
        return
    if not is_subscribed_default(user_id=user_id):
        ask_to_subscribe(user_id=user_id)
        return

    last_claim_time = database.get_last_claim(user_id=user_id)
    current_time = datetime.datetime.now()
    time_difference = current_time - last_claim_time

    if time_difference.total_seconds() >= config.CLAIM_INTERVAL * 3600:
        database.claim_reward(user_id=user_id)
        ru_text = f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {config.CLAIM_REWARD} {config.COIN_NAME}!\n\n–°–∫–æ—Ä–æ –≤—ã–π–¥–µ—Ç –Ω–∞—à–∞ –∏–≥—Ä–∞ –∏ –æ–Ω–∏ —Ç–µ–±–µ –±—É–¥—É—Ç –Ω—É–∂–Ω—ã, –∑–∞—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üëã"
        en_text = f"You got {config.CLAIM_REWARD} {config.COIN_NAME}\n\nOur game will be released soon and you'll need them, log in every dayüëã"
        send_message_by_language(user_id=user_id, ru_message=ru_text, en_message=en_text)
    else:
        remaining_time = datetime.timedelta(seconds=12 * 3600) - time_difference
        hours, remainder = divmod(remaining_time.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        ru_text = f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç."
        en_text = f"You already got tokens, come back in {hours} hours an {minutes} minutes."
        send_message_by_language(user_id=user_id, ru_message=ru_text, en_message=en_text)


@bot.message_handler(func=lambda message: message.text in markups.wallet_commands)
def cmd_wallet(message: types.Message):
    user_id = message.from_user.id
    if not database.is_user_in_db(user_id=user_id):
        ask_to_choose_language(user_id=user_id)
        return
    if not is_subscribed_default(user_id=user_id):
        ask_to_subscribe(user_id=user_id)
        return
    language = database.get_language(user_id=user_id)
    wallet = database.get_wallet(user_id=user_id)
    text = f"–í–∞—à –∫–æ—à–µ–ª–µ–∫: {wallet}\n\n–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–µ–∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–µ—Ç–∏ TON - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º Tonkeeper/Tonhub/MyTonWallet" if language == "ru" else f"Your wallet: {wallet}\n\nYou have to connect a non-custodial wallet of TON - we recommend Tonkeeper/Tonhub/MyTonWallet"
    image = open(f"images/img.jpg", "rb")
    markup = types.InlineKeyboardMarkup()
    add_wallet_button = types.InlineKeyboardButton('–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫' if language == "ru" 
                                                   else "Connect wallet", callback_data='add_wallet')
    markup.add(add_wallet_button)
    bot.send_photo(chat_id=user_id, photo=image, caption=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "add_wallet")
def callback_add_wallet(call):
    user_id = call.from_user.id
    language = database.get_language(user_id=user_id)
    answer = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫:\nTonSpace, MyTonWallet, Tonkeeper" if language == "ru" else "Please send the wallet address:\n\n Use only non-custodial wallets such as:\nTonSpace, MyTonWallet, Tonkeeper"
    bot.send_message(call.message.chat.id, text=answer, reply_markup=USER_MARKUP if language == "ru" else USER_MARKUP_EN)
    link_wallet.add(user_id)


@bot.message_handler(func=lambda message: message.text in markups.info_commands)
def cmd_info(message: types.Message):
    user_id = message.from_user.id
    if not database.is_user_in_db(user_id=user_id):
        ask_to_choose_language(user_id=user_id)
        return
    if not is_subscribed_default(user_id=user_id):
        ask_to_subscribe(user_id=user_id)
        return
    language = database.get_language(user_id=user_id)
    text = f"–ü—Ä–æ–µ–∫—Ç FEHU-COIN —Å—Ç–∞–≤–∏—Ç –ø–µ—Ä–µ–¥ —Å–æ–±–æ—é –∞–º–±–∏—Ü–∏–æ–∑–Ω—É—é –∑–∞–¥–∞—á—É —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–∑ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ .–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞—à —Ç–æ–∫–µ–Ω $FEHU –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç –º–Ω–æ–≥–æ –∏–∫—Å–æ–≤ –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–µ! –ù–æ –µ—â—ë –¥–æ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω—É—é –ø—Ä–∏–±—ã–ª—å –≤ —Ö–æ–¥–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ . –í —Ç–æ–º —á–∏—Å–ª–µ –∏ –≤ –≤–∏–¥–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å–≤–æ–∏ –∫–æ—à–µ–ª—å–∫–∏ .\n\n–°–µ–π—á–∞—Å –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –Ω–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤, —ç—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å!\n\n0.5 —Ç–æ–∫–µ–Ω–æ–≤ $FEHU - –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞! –ß–µ–º –±–æ–ª—å—à–µ —É —Ç–µ–±—è –¥—Ä—É–∑–µ–π, —Ç–µ–º –±–æ–ª—å—à–µ $FEHU —Ç—ã –ø–æ–ª—É—á–∏—à—å\n0.5 —Ç–æ–∫–µ–Ω–æ–≤ $FEHU -- –∑–∞ –≤—Ö–æ–¥ –≤ –±–æ—Ç ." if language == "ru" else f"The FEHU-COIN project has an ambitious goal of creating a tool for making a profit for all members of our community from highly profitable and technological sources. You will receive our $FEHU token, which will give you a lot of x's on the listing! But even before the listing, you will be able to make a serious profit during the distribution campaign of our token. Including in the form of cash to your wallets. \n\nNow the main task is to collect or purchase as many of our tokens as possible, this will give you the opportunity to make a real profit! \n\n0.5 $FEHU tokens - For each friend you bring! The more friends you have, the more $FEHU you will receive \n0.5 $FEHU tokens -- for entering the bot."
    image = open(f"images/img.jpg", "rb")
    bot.send_photo(chat_id=user_id, photo=image, caption=text, reply_markup=USER_MARKUP if language == "ru" else USER_MARKUP_EN)


@bot.message_handler(func=lambda message: message.text in markups.buy_commands)
def cmd_info(message: types.Message):
    user_id = message.from_user.id
    if not database.is_user_in_db(user_id=user_id):
        ask_to_choose_language(user_id=user_id)
        return
    if not is_subscribed_default(user_id=user_id):
        ask_to_subscribe(user_id=user_id)
        return
    language = database.get_language(user_id=user_id)
    text = f"üìà –†–∞–Ω–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ {config.COIN_NAME} –ø–æ —Ü–µ–Ω–µ –ø—Ä–µ-—Å–µ–π–ª–∞!\n\n–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ - 4 USD. –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—à–∏—Ç–µ @Bugirt\n\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã: XRocket, TON , TRX , USDT , Payeer (—Ä—É–±–ª–∏, –¥–æ–ª–ª–∞—Ä—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞), –∫–∞—Ä—Ç—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤." if language == "ru" else f"üìà Early adopters can purchase {config.COIN_NAME} at the pre-sale price.\n\nThe price of one token is 4 USD. To participate in the pre-sale, contact @Bugirt\n\n‚úÖ Available payment methods: XRocket, TON , TRX , USDT , Payeer (rubles, dollars, crypto), russian bank cards."
    image = open(f"images/img.jpg", "rb")
    bot.send_photo(chat_id=user_id, photo=image, caption=text, reply_markup=USER_MARKUP if language == "ru" else USER_MARKUP_EN)


@bot.message_handler(func=lambda message: message.text in markups.buyers_reward_commands)
def cmd_info(message: types.Message):
    user_id = message.from_user.id
    language = database.get_language(user_id=user_id)
    if not database.is_user_in_db(user_id=user_id):
        ask_to_choose_language(user_id=user_id)
        return
    if not is_subscribed_default(user_id=user_id):
        ask_to_subscribe(user_id=user_id)
        return
    referrals_ids = database.get_referrals_ids(user_id=user_id)
    if not referrals_ids:
        image = open(f"images/img.jpg", "rb")
        text = f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 20% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: $0" if language == "ru" else f"You get 20% for each purchase of tokens by your referral.\n\nYour balance: $0"
        bot.send_photo(chat_id=user_id, photo=image, caption=text)
        return
    referrals_usernames = database.get_referrals_usernames(referrals_ids=referrals_ids)
    referrals_sums = database.get_buyers_referrals_sums(referrals_usernames)
    revenue = round(float(database.users_get(item="buyers_balance", user_id=user_id)), 2)
    revenue_and_referrals = ""
    for i in range(len(referrals_ids)):
        revenue_and_referrals += f"@{referrals_usernames[i]}: ${referrals_sums[i]}\n"
    text = f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 20% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${revenue}\n\n–ü—Ä–∏–±—ã–ª—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n{revenue_and_referrals}" if language == "ru" else f"You get 20% for each purchase of tokens by your referral.\n\nYour balance: ${revenue}\n\nRevenue by referrals:\n{revenue_and_referrals}"
    inline_markup = InlineKeyboardMarkup(row_width=1)
    request_withdrawal_button = InlineKeyboardButton(text="üíµ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É" if language == "ru" else "üíµ Request a withdrawal", callback_data="request_withdrawal")
    inline_markup.add(request_withdrawal_button)
    image = open(f"images/img.jpg", "rb")
    bot.send_photo(chat_id=user_id, photo=image, caption=text, reply_markup=inline_markup)

@bot.callback_query_handler(func=lambda call: call.data == "request_withdrawal")
def callback_request_withdrawal(call):
    user_id = call.from_user.id
    language = database.get_language(user_id=user_id)
    try:
        database.create_withdrawal_request(user_id=user_id)
        text = "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ." if language == "ru" else "Request created successfully."
        bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        text = "callback_request_withdrawal: " + str(e)
        bot.send_message(chat_id=user_id, text=text)



@bot.message_handler(commands=["admin"])
def cmd_admin_panel(message: types.Message):
    user_id = message.from_user.id
    if not user_is_admin(user_id=user_id):
        return
    inline_markup = InlineKeyboardMarkup(row_width=2)
    users_button = InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë®‚Äçüë©‚Äçüëß‚Äçüë¶", callback_data="admin_users")
    statistics_button = InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="admin_statistics")
    tasks_button = InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏—è üìã", callback_data="admin_tasks")
    broadcast_button = InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ üì©", callback_data="admin_broadcast")
    add_buyer_button = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ‚ûï", callback_data="admin_add_buyer")
    buyers_button = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üí∞", callback_data="admin_buyers")
    withdrawal_requests_button = InlineKeyboardButton("–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ üíµ", callback_data="admin_withdrawal_requests")
    inline_markup.add(users_button, statistics_button, tasks_button, broadcast_button, add_buyer_button, buyers_button, withdrawal_requests_button)
    bot.send_message(chat_id=user_id, text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: call.data == "admin_broadcast")
def callback_admin_broadcast(call):
    user_id = call.from_user.id
    admin_states[user_id] = STATE_WAITING_FOR_BROADCAST_MESSAGE
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    bot.send_message(chat_id=user_id, text=text)


@bot.callback_query_handler(func=lambda call: call.data == "admin_users")
def callback_admin_broadcast(call):
    user_id = call.from_user.id
    text = "/increase_balance - —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n/decrease_balance - —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n/get_info - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
    bot.send_message(chat_id=user_id, text=text)


@bot.message_handler(commands=["increase_balance"])
def cmd_increase_balance(message: types.Message):
    user_id = message.from_user.id
    admin_states[user_id] = STATE_WAITING_FOR_USER_USERNAME_TO_INCREASE_BALANCE
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @example:"
    bot.send_message(chat_id=user_id, text=text)


@bot.message_handler(commands=["decrease_balance"])
def cmd_increase_balance(message: types.Message):
    user_id = message.from_user.id
    admin_states[user_id] = STATE_WAITING_FOR_USER_USERNAME_TO_DECREASE_BALANCE
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @example:"
    bot.send_message(chat_id=user_id, text=text)


@bot.message_handler(commands=["get_info"])
def cmd_get_info(message: types.Message):
    user_id = message.from_user.id
    admin_states[user_id] = STATE_WAITING_FOR_USER_USERNAME_TO_GET_INFO
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:"
    bot.send_message(chat_id=user_id, text=text)


@bot.callback_query_handler(func=lambda call: call.data == "admin_statistics")
def callback_admin_broadcast(call):
    user_id = call.from_user.id
    users = database.get_number_of_users()
    today = 0
    week = 0
    month = 0
    reg_dates = database.get_all_registration_dates()
    current_time = datetime.datetime.now()
    for reg_date in reg_dates:
        time_difference = current_time - reg_date
        if time_difference.total_seconds() <= 24 * 3600:
            today += 1
        elif time_difference.total_seconds() <= 168 * 3600:
            week += 1
        elif time_difference.total_seconds() <= 720 * 3600:
            month += 1
        else:
            break
    tasks_done = sum(database.get_all_tasks_done())
    balance = sum(database.get_all_balances())
    text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n–°–µ–≥–æ–¥–Ω—è: {today}\n–ó–∞ –Ω–µ–¥–µ–ª—é: {week}\n–ó–∞ –º–µ—Å—è—Ü: {month}\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {tasks_done}\n\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}"
    bot.send_message(chat_id=user_id, text=text)


@bot.callback_query_handler(func=lambda call: call.data == "admin_tasks")
def callback_admin_tasks(call):
    user_id = call.from_user.id
    tasks = database.get_all_tasks()
    text = """/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n/remove - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º:"""
    for public_link in tasks:
        times_done = database.get_times_done(public_link=public_link)
        text += f"\n{public_link}: {times_done}"
    bot.send_message(chat_id=user_id, text=text)

def broadcast_message(admin_id):
    user_ids = database.get_all_users()
    language = database.get_language(user_id=admin_id)
    text = admin_states_data[admin_id]["broadcast_text"]
    image = admin_states_data[admin_id]["broadcast_image_id"]
    button_name = admin_states_data[admin_id]["broadcast_button_name"]
    button_link = admin_states_data[admin_id]["broadcast_button_link"]
    inline_markup = InlineKeyboardMarkup()
    inline_button = InlineKeyboardButton(text=button_name, url=button_link)
    inline_markup.add(inline_button)
    sent = 0
    not_sent = 0
    for user_id in user_ids:
        try:
            bot.send_photo(chat_id=user_id, photo=image, caption=text, reply_markup=inline_markup)
            sent += 1
        except Exception as e:
            print(e)
            not_sent += 1
    text = f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {not_sent}"
    bot.send_message(chat_id=admin_id, text=text, reply_markup=USER_MARKUP if language == "ru" else USER_MARKUP_EN, parse_mode="HTML")


@bot.message_handler(commands=["add"])
def cmd_add(message: types.Message):
    user_id = message.from_user.id
    if not user_is_admin(user_id=user_id):
        return
    text = "–ü—Ä–∏—à–ª–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞ –≤–∏–¥–∞ @example:"
    bot.send_message(chat_id=user_id, text=text)
    admin_states[user_id] = STATE_WAITING_FOR_PUBLIC_LINK


@bot.message_handler(commands=["remove"])
def cmd_delete(message: types.Message):
    try:
        user_id = message.from_user.id
        if not user_is_admin(user_id=user_id):
            return
        text = "–ü—Ä–∏—à–ª–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –≤–∏–¥–∞ @example:"
        bot.send_message(chat_id=user_id, text=text)
        admin_states[user_id] = STATE_WAITING_FOR_PUBLIC_LINK_TO_DELETE
    except Exception as e:
        print(e)


@bot.callback_query_handler(func=lambda call: call.data == "admin_add_buyer")
def callback_admin_tasks(call):
    user_id = call.from_user.id
    admin_states[user_id] = STATE_WAITING_FOR_BUYER_USERNAME
    text = "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @example:"
    bot.send_message(chat_id=user_id, text=text)


@bot.callback_query_handler(func=lambda call: call.data == "admin_buyers")
def callback_admin_buyers(call):
    user_id = call.from_user.id
    buyers = database.get_all_buyers()

    file_name = 'buyers.txt'
    with open(file_name, 'w', encoding="utf-8") as file:
        file.write("BUYERS LIST:\n\n")
        for buyer in buyers:
            line = f"Username: {buyer[0]}, Wallet: {buyer[1]}, Sum: {buyer[2]}\n"
            file.write(line)

    with open("buyers.txt", 'rb') as file:
        bot.send_document(user_id, file)


@bot.callback_query_handler(func=lambda call: call.data == "admin_withdrawal_requests")
def callback_admin_withdrawal_requests(call):
    user_id = call.from_user.id
    text = "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:\n\n"
    data = database.get_withdrawal_requests_data()
    if not data:
        bot.send_message(chat_id=user_id, text="–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç.")
        return
    for request in data:
        text += f"–ù–∏–∫–Ω–µ–π–º: {request[0]} –°—É–º–º–∞: ${request[1]} –ö–æ—à–µ–ª–µ–∫: {request[2]}\n"
    bot.send_message(chat_id=user_id, text=text)


@bot.message_handler(func=lambda message: True, content_types=["text", "photo"])
def handle_admin_message(message: types.Message):
    try:
        user_id = message.from_user.id
        language = database.get_language(user_id=user_id)
        global admin_states, admin_states_data, link_wallet

        if user_id in admin_states:
            if admin_states[user_id] == STATE_WAITING_FOR_PUBLIC_LINK:
                public_link = message.text
                if not public_link_is_valid(public_link):
                    text = "–î–∞–Ω–Ω–∞—è –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                    bot.send_message(chat_id=user_id, text=text)
                    return
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                admin_states_data[user_id]["public_link"] = public_link
                text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –µ–µ –Ω–µ—Ç - –ø—Ä–∏—à–ª–∏—Ç–µ 0):"
                bot.send_message(chat_id=user_id, text=text)
                admin_states[user_id] = STATE_WAITING_FOR_PRIVATE_LINK
                return

            if admin_states[user_id] == STATE_WAITING_FOR_PRIVATE_LINK:
                private_link = message.text
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                if message.text == "0":
                    private_link = "https://t.me/" + admin_states_data[user_id]["public_link"][1:]
                    admin_states_data[user_id]["private_link"] = private_link
                else:
                    admin_states_data[user_id]["private_link"] = private_link
                admin_states[user_id] = STATE_WAITING_FOR_REWARD
                text = f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Ü–∏—Ñ—Ä–∞) :"
                bot.send_message(chat_id=user_id, text=text)
                return
            
            if admin_states[user_id] == STATE_WAITING_FOR_REWARD:
                string = message.text
                #  default reward
                reward = 100
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                try:
                    reward = int(string)
                except:
                    bot.send_message(chat_id=user_id, text="–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ")
                    return
                admin_states_data[user_id]["reward"] = reward
                add_channel(user_id)
                text = f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞–Ω–∏—è."
                bot.send_message(chat_id=user_id, text=text)
                return

            if admin_states[user_id] == STATE_WAITING_FOR_PUBLIC_LINK_TO_DELETE:
                public_link = message.text
                if not database.is_channel_in_db(public_link):
                    text = "–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ –∑–∞–¥–∞–Ω–∏—è—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                    bot.send_message(user_id, text=text)
                else:
                    database.remove_channel_from_db(public_link=public_link)
                    text = "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–¥–∞–Ω–∏–π."
                    bot.send_message(chat_id=user_id, text=text)
                    admin_states[user_id] = None  # Reset the state
                
            if admin_states[user_id] == STATE_WAITING_FOR_BROADCAST_MESSAGE:
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                admin_states_data[user_id]["broadcast_text"] = message.text
                text = "–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
                bot.send_message(chat_id=user_id, text=text)
                admin_states[user_id] = STATE_WAITING_FOR_BROADCAST_IMAGE
                return

            if admin_states[user_id] == STATE_WAITING_FOR_BROADCAST_IMAGE and message.content_type == 'photo':
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                admin_states_data[user_id]["broadcast_image_id"] = message.photo[-1].file_id
                text = "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
                bot.send_message(chat_id=user_id, text=text)
                admin_states[user_id] = STATE_WAITING_FOR_BROADCAST_BUTTON_NAME
                return

            if admin_states[user_id] == STATE_WAITING_FOR_BROADCAST_BUTTON_NAME:
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                admin_states_data[user_id]["broadcast_button_name"] = message.text
                text = "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:"
                bot.send_message(chat_id=user_id, text=text)
                admin_states[user_id] = STATE_WAITING_FOR_BROADCAST_BUTTON_LINK
                return

            if admin_states[user_id] == STATE_WAITING_FOR_BROADCAST_BUTTON_LINK:
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                admin_states_data[user_id]["broadcast_button_link"] = message.text
                text = "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏."
                bot.send_message(chat_id=user_id, text=text)
                broadcast_message(admin_id=user_id)
                admin_states[user_id] = None  # Reset the state

            if admin_states[user_id] == STATE_WAITING_FOR_USER_USERNAME_TO_INCREASE_BALANCE:
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                admin_states_data[user_id]["username"] = message.text[1:]
                text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
                bot.send_message(chat_id=user_id, text=text)
                admin_states[user_id] = STATE_WAITING_FOR_NUMBER_TO_INCREASE_BALANCE
                return

            if admin_states[user_id] == STATE_WAITING_FOR_NUMBER_TO_INCREASE_BALANCE:
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                try:
                    admin_states_data[user_id]["number"] = float(message.text)
                    text = "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–µ–ª–∏—á–µ–Ω."
                    admin_states[user_id] = None
                    target_user_id = database.get_user_id_by_username(username=admin_states_data[user_id]["username"])
                    database.increase_user_balance(user_id=target_user_id, number=admin_states_data[user_id]["number"])
                    bot.send_message(chat_id=user_id, text=text)
                except Exception as e:
                    bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    print(e)
                finally:
                    admin_states[user_id] = None

            if admin_states[user_id] == STATE_WAITING_FOR_USER_USERNAME_TO_DECREASE_BALANCE:
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                admin_states_data[user_id]["username"] = message.text[1:]
                text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
                bot.send_message(chat_id=user_id, text=text)
                admin_states[user_id] = STATE_WAITING_FOR_NUMBER_TO_DECREASE_BALANCE
                return

            if admin_states[user_id] == STATE_WAITING_FOR_NUMBER_TO_DECREASE_BALANCE:
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                try:
                    admin_states_data[user_id]["number"] = float(message.text)
                    text = "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–º–µ–Ω—å—à–µ–Ω."
                    admin_states[user_id] = None
                    target_user_id = database.get_user_id_by_username(username=admin_states_data[user_id]["username"])
                    database.decrease_user_balance(user_id=target_user_id, number=admin_states_data[user_id]["number"])
                    bot.send_message(chat_id=user_id, text=text)
                except Exception as e:
                    bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    print(e)
                finally:
                    admin_states[user_id] = None

            if admin_states[user_id] == STATE_WAITING_FOR_USER_USERNAME_TO_GET_INFO:
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                id = int(database.get_user_id_by_username(message.text[1:]))
                if database.is_user_in_db(user_id=id):
                    data = database.get_user_info(user_id=id)
                    usr_id, balance, referrals, referrer, wallet, registration_date, language = data
                    text = f"ID: {usr_id}\n–ë–∞–ª–∞–Ω—Å: {balance}\n–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}\n–†–µ—Ñ–µ—Ä–µ—Ä: {referrer}\n–ö–æ—à–µ–ª–µ–∫: {wallet}\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {registration_date}\n–Ø–∑—ã–∫: {language}"
                    bot.send_message(chat_id=user_id, text=text)
                else:
                    bot.send_message(chat_id=user_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

                admin_states[user_id] = None

            if admin_states[user_id] == STATE_WAITING_FOR_BUYER_USERNAME:
                buyer_username = message.text
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                admin_states_data[user_id]["buyer_username"] = buyer_username
                text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
                bot.send_message(chat_id=user_id, text=text)
                admin_states[user_id] = STATE_WAITING_FOR_BUYER_SUM
                return
            
            if admin_states[user_id] == STATE_WAITING_FOR_BUYER_SUM:
                buyer_sum = int(message.text)
                revenue = 0.2
                if user_id not in admin_states_data:
                    admin_states_data[user_id] = {}
                try:
                    admin_states_data[user_id]["buyer_sum"] = float(buyer_sum)
                except Exception as e:
                    bot.send_message(chat_id=user_id, text=e)
                try:
                    buyer_username = admin_states_data[user_id]["buyer_username"]
                    buyer_id = database.get_user_id_by_username(username=buyer_username[1:])
                    buyer_wallet = database.users_get(item="wallet", user_id=buyer_id)
                    buyer_referrer_id = database.get_referrer_id(user_id=buyer_id)
                    database.add_buyer_into_db(username=buyer_username, sum=buyer_sum, wallet=buyer_wallet)
                    database.users_increase(item="paid_balance", user_id=buyer_id, value=buyer_sum)
                    if database.get_referrer_id(user_id=user_id) != None:
                        database.reward_buyer_referrer(referrer_id=buyer_referrer_id, amount=float(buyer_sum) * revenue)
                    text = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ."
                    bot.send_message(chat_id=user_id, text=text)
                    return
                except Exception as e:
                    print("there")
                    print(e)
                finally:
                    admin_states[user_id] = None

        if user_id in link_wallet:
            wallet = message.text
            database.update_wallet(user_id=user_id, wallet=wallet)
            text = '–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!'
            bot.send_message(chat_id=user_id, text=text, reply_markup=USER_MARKUP if language == "ru" else USER_MARKUP_EN)
            link_wallet.remove(user_id)  # Remove user from the link_wallet set after processing

    except Exception as e:
        print("here")
        print(e)


def start_bot():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print("An unhabdled exception in polling loop occcured: ")
            traceback.print_exc()

if __name__ == "__main__":
    database.init_db()
    bot.polling(none_stop=True)